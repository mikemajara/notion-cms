/**
 * Phase 3 Integration Test
 *
 * This test verifies that the generated types work correctly with the NotionCMS queryWithTypes method
 * and that the filter method provides proper IntelliSense.
 */

import { NotionCMS } from "../index";

// Import the actual generated types (we'll simulate them here for testing)
const RecordResourceTrackerFieldTypes = {
  "Last Review Date": { type: "date" },
  "Estimated Monthly Cost": { type: "number" },
  "Tag Compliance": { type: "checkbox" },
  Owner: { type: "people" },
  "Last Used Date": { type: "date" },
  "Service Name": {
    type: "multi_select",
    options: [
      "notifications",
      "analytics",
      "payment-gateway",
      "user-service",
      "auth-service",
    ] as const,
  },
  "Linked Project / Jira Ticket": { type: "url" },
  "Can Be Deprovisioned": { type: "checkbox" },
  Environment: {
    type: "select",
    options: ["Dev", "Staging", "Prod"] as const,
  },
  "Auto Shutdown Configured": { type: "checkbox" },
  "Instance Size / Tier": { type: "rich_text" },
  "Estimated Monthly Cost (USD)": { type: "number" },
  "Provision Date": { type: "date" },
  "Resource Type": {
    type: "select",
    options: [
      "EC2",
      "S3",
      "Lambda",
      "RDS",
      "ECS",
      "DynamoDB",
      "ElastiCache",
      "SNS",
      "SQS",
      "EKS",
    ] as const,
  },
  Region: {
    type: "select",
    options: [
      "us-east-1",
      "us-east-2",
      "us-west-1",
      "us-west-2",
      "eu-west-1",
      "eu-central-1",
      "ap-southeast-1",
      "ap-southeast-2",
    ] as const,
  },
  Team: { type: "rich_text" },
  Notes: { type: "rich_text" },
  "Is Active": { type: "checkbox" },
  "Reviewed by DevOps": { type: "status" },
  "Reason for Keeping": {
    type: "multi_select",
    options: ["Pending migration", "Critical service"] as const,
  },
  ID: { type: "unique_id" },
  Title: { type: "title" },
} as const;

type RecordResourceTracker = {
  id: string;
  "Last Review Date": Date;
  "Estimated Monthly Cost": number;
  "Tag Compliance": boolean;
  Owner: string[];
  "Last Used Date": Date;
  "Service Name": Array<
    | "notifications"
    | "analytics"
    | "payment-gateway"
    | "user-service"
    | "auth-service"
  >;
  "Linked Project / Jira Ticket": string;
  "Can Be Deprovisioned": boolean;
  Environment: "Dev" | "Staging" | "Prod";
  "Auto Shutdown Configured": boolean;
  "Instance Size / Tier": string;
  "Estimated Monthly Cost (USD)": number;
  "Provision Date": Date;
  "Resource Type":
    | "EC2"
    | "S3"
    | "Lambda"
    | "RDS"
    | "ECS"
    | "DynamoDB"
    | "ElastiCache"
    | "SNS"
    | "SQS"
    | "EKS";
  Region:
    | "us-east-1"
    | "us-east-2"
    | "us-west-1"
    | "us-west-2"
    | "eu-west-1"
    | "eu-central-1"
    | "ap-southeast-1"
    | "ap-southeast-2";
  Team: string;
  Notes: string;
  "Is Active": boolean;
  "Reviewed by DevOps": any;
  "Reason for Keeping": Array<"Pending migration" | "Critical service">;
  ID: any;
  Title: string;
};

/**
 * Generated query function (like what would be generated by the CLI)
 */
function query(notionCMS: NotionCMS, databaseId: string) {
  return notionCMS.queryDatabase<RecordResourceTracker, typeof RecordResourceTrackerFieldTypes>(
    databaseId,
    RecordResourceTrackerFieldTypes
  );
}

describe("Phase 3 Integration Tests", () => {
  let notionCMS: NotionCMS;

  beforeEach(() => {
    notionCMS = new NotionCMS("fake-token");
  });

  describe("Generated Query Function", () => {
    test("should return a QueryBuilder with filter method", () => {
      const queryBuilder = query(notionCMS, "test-database-id");

      expect(typeof queryBuilder.filter).toBe("function");
      expect(typeof queryBuilder.sort).toBe("function");
      expect(typeof queryBuilder.limit).toBe("function");
    });

    test("should accept valid field names and operators", () => {
      const queryBuilder = query(notionCMS, "test-database-id");

      // These should not throw TypeScript errors and should work at runtime
      expect(() => {
        queryBuilder
          .filter("Provision Date", "after", new Date("2024-01-01"))
          .filter("Environment", "equals", "Prod")
          .filter("Is Active", "equals", true)
          .filter("Estimated Monthly Cost", "greater_than", 100)
          .filter("Service Name", "contains", "analytics");
      }).not.toThrow();
    });

    test("should build correct filter chains", () => {
      const queryBuilder = query(notionCMS, "test-database-id");

      const chainedQuery = queryBuilder
        .filter("Resource Type", "equals", "EC2")
        .filter("Environment", "equals", "Prod")
        .filter("Is Active", "equals", true)
        .sort("Provision Date", "descending")
        .limit(50);

      expect(chainedQuery).toBe(queryBuilder); // Should return same instance for chaining
    });
  });

  describe("Type Safety Validation", () => {
    test("should infer correct types from field metadata", () => {
      // This is primarily a compile-time test
      // The fact that this compiles means the types are working

      type FieldTypes = typeof RecordResourceTrackerFieldTypes;

      // Test field type extraction
      type ProvisionDateType = FieldTypes["Provision Date"]["type"]; // Should be "date"
      type EnvironmentType = FieldTypes["Environment"]["type"]; // Should be "select"
      type IsActiveType = FieldTypes["Is Active"]["type"]; // Should be "checkbox"

      expect(RecordResourceTrackerFieldTypes["Provision Date"].type).toBe(
        "date"
      );
      expect(RecordResourceTrackerFieldTypes["Environment"].type).toBe(
        "select"
      );
      expect(RecordResourceTrackerFieldTypes["Is Active"].type).toBe(
        "checkbox"
      );
    });

    test("should preserve select options as literal types", () => {
      type EnvironmentOptions =
        (typeof RecordResourceTrackerFieldTypes)["Environment"]["options"];
      type ResourceTypeOptions =
        (typeof RecordResourceTrackerFieldTypes)["Resource Type"]["options"];

      const envOptions = RecordResourceTrackerFieldTypes["Environment"].options;
      const resourceOptions =
        RecordResourceTrackerFieldTypes["Resource Type"].options;

      expect(envOptions).toEqual(["Dev", "Staging", "Prod"]);
      expect(resourceOptions).toEqual([
        "EC2",
        "S3",
        "Lambda",
        "RDS",
        "ECS",
        "DynamoDB",
        "ElastiCache",
        "SNS",
        "SQS",
        "EKS",
      ]);
    });
  });

  describe("Real-world Usage Scenarios", () => {
    test("should support complex filtering scenarios", () => {
      const queryBuilder = query(notionCMS, "test-database-id");

      // Scenario: Find expensive production resources that need review
      expect(() => {
        queryBuilder
          .filter("Environment", "equals", "Prod")
          .filter("Is Active", "equals", true)
          .filter("Estimated Monthly Cost (USD)", "greater_than", 100)
          .filter("Last Review Date", "before", new Date("2024-01-01"))
          .sort("Estimated Monthly Cost (USD)", "descending")
          .limit(25);
      }).not.toThrow();
    });

    test("should support multi-select filtering", () => {
      const queryBuilder = query(notionCMS, "test-database-id");

      // Scenario: Find all analytics-related services
      expect(() => {
        queryBuilder
          .filter("Service Name", "contains", "analytics")
          .filter("Environment", "equals", "Prod")
          .sort("Provision Date", "ascending");
      }).not.toThrow();
    });

    test("should support text field filtering", () => {
      const queryBuilder = query(notionCMS, "test-database-id");

      // Scenario: Find resources with specific notes
      expect(() => {
        queryBuilder
          .filter("Notes", "contains", "important")
          .filter("Team", "starts_with", "DevOps")
          .filter("Instance Size / Tier", "is_not_empty", "");
      }).not.toThrow();
    });
  });
});

/**
 * This function demonstrates the IntelliSense behavior that should now work
 * When you type this in your IDE, you should see proper suggestions
 */
export function demonstratePhase3IntelliSense() {
  const cms = new NotionCMS("your-token");
  const databaseId = "your-database-id";

  // This should now provide perfect IntelliSense:
  // 1. Field names when typing the first parameter
  // 2. Operators when typing the second parameter
  // 3. Values when typing the third parameter
  return query(cms, databaseId)
    .filter("Provision Date", "after", new Date("2024-01-01")) // ✅ Date field
    .filter("Environment", "equals", "Prod") // ✅ Select options
    .filter("Is Active", "equals", true) // ✅ Boolean field
    .filter("Service Name", "contains", "analytics") // ✅ Multi-select options
    .sort("Estimated Monthly Cost (USD)", "descending") // ✅ Field names
    .limit(10);
}
